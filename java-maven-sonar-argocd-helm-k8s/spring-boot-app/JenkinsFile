pipeline {
    agent any  // You can specify a specific agent label for your Windows VM here
    
    stages {
        stage('Checkout') {
            steps {
                bat 'echo passed'
                // Replace with your Git checkout command for Windows
                // For example:
                // bat 'git checkout main'
                // bat 'git clone https://github.com/kavya1516/Jenkins.git'
            }
        }
        stage('Build and Test') {
            steps {
                bat 'dir'  // Equivalent to 'ls -ltr' on Windows
                // Build the project and create a JAR file
                bat 'cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                // Adjust the SonarQube analysis command for Windows
                // withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                withSonarQubeEnv('sonar-scanner') {
                    script {
                        def scannerHome = tool 'sonar-scanner
                        bat 'cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app && mvn sonar:sonar -Dsonar.projectName=spring-boot-app -Dsonar.projectKey=spring-boot-app -Dsonar.java.binaries=.", returnStatus: true
                    }
               // -Dsonar.login=%SONAR_AUTH_TOKEN% -Dsonar.host.url=%SONAR_URL%'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "kavyaaa92/ultimate-cicd:%BUILD_NUMBER%"
                // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s\\spring-boot-app\\Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    bat 'cd java-maven-sonar-argocd-helm-k8s\\spring-boot-app && docker build -t %DOCKER_IMAGE% .'
                    def dockerImage = docker.image("%DOCKER_IMAGE%")
                    // Adjust the Docker registry URL for Windows
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Jenkins"
                GIT_USER_NAME = "kavya1516"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    bat '''
                        git config user.email "kavya.devops1607@gmail.com"
                        git config user.name "kavya1516"
                        SET BUILD_NUMBER=%BUILD_NUMBER%
                        (echo off
                        for /f "tokens=*" %%a in ('type java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml') do (
                            set "line=%%a"
                            setlocal enabledelayedexpansion
                            set "line=!line:replaceImageTag=!BUILD_NUMBER!!"
                            echo(!line!
                            endlocal
                        )) > java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s\\spring-boot-app-manifests\\deployment.yml
                        git commit -m "Update deployment image to version %BUILD_NUMBER%"
                        git push https://%GITHUB_TOKEN%@github.com/%GIT_USER_NAME%/%GIT_REPO_NAME% HEAD:main
                    '''
                }
            }
        }
    }
}
